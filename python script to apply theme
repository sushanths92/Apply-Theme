import os
import shutil
import json

# Determine the path to the Themer folder
current_dir = os.path.dirname(os.path.abspath(__file__))
themer_folder = current_dir

# Define paths within the Themer folder
standard_resources_folder = os.path.join(themer_folder, 'standard_settings', 'KLA Power BI Template Visuals.Report', 'StaticResources', 'RegisteredResources')

# Find the dynamic folder name within the pbi_file_in_pbip_format folder
pbi_file_folder = os.path.join(themer_folder, 'pbi_file_in_pbip_format')
dynamic_pbi_folder = None

for item in os.listdir(pbi_file_folder):
    item_path = os.path.join(pbi_file_folder, item)
    if os.path.isdir(item_path) and item.endswith('.Report'):
        dynamic_pbi_folder = item_path
        break

if dynamic_pbi_folder is None:
    raise FileNotFoundError("No folder ending with '.Report' found in the pbi_file_in_pbip_format directory.")

pbi_resources_folder = os.path.join(dynamic_pbi_folder, 'StaticResources', 'RegisteredResources')
report_json_path = os.path.join(dynamic_pbi_folder, 'definition', 'report.json')

# Define paths for page.json files
standard_pages_folder = os.path.join(themer_folder, 'standard_settings', 'KLA Power BI Template Visuals.Report', 'definition', 'pages')
pbi_pages_folder = os.path.join(dynamic_pbi_folder, 'definition', 'pages')

# Paths for folders to be copied
folders_to_copy = ['KLA_Logo', 'Disclaimer', 'Page_Title']
folder_paths = {}

def copy_registered_resources():
    if not os.path.exists(pbi_resources_folder):
        os.makedirs(pbi_resources_folder)
        
    # Copy all files from the standard resources folder to the pbi resources folder
    for item in os.listdir(standard_resources_folder):
        s = os.path.join(standard_resources_folder, item)
        d = os.path.join(pbi_resources_folder, item)
        if os.path.isfile(s):
            shutil.copy2(s, d)
        elif os.path.isdir(s):
            shutil.copytree(s, d, dirs_exist_ok=True)

def update_report_json():
    with open(report_json_path, 'r') as file:
        data = json.load(file)
    
    # Find and update the RegisteredResources section
    for package in data.get('resourcePackages', []):
        if package['name'] == 'RegisteredResources':
            # Get current items in RegisteredResources
            existing_items = {item['name']: item for item in package.get('items', [])}
            
            # Add new items to the RegisteredResources section
            new_items = []
            for item in os.listdir(pbi_resources_folder):
                item_path = os.path.join(pbi_resources_folder, item)
                if os.path.isfile(item_path):
                    if item.lower().endswith('.json'):
                        resource_type = 'CustomTheme'
                    elif item.lower().endswith(('.png', '.svg', '.jpg', '.jpeg')):
                        resource_type = 'Image'
                    else:
                        resource_type = 'File'
                    
                    new_item = {
                        'name': item,
                        'path': item,
                        'type': resource_type
                    }
                    new_items.append(new_item)
            
            # Update the items list in RegisteredResources
            for item in new_items:
                if item['name'] not in existing_items:
                    package['items'].append(item)
            
            break
    
    # Write the updated JSON data back to the file
    with open(report_json_path, 'w') as file:
        json.dump(data, file, indent=4)

def get_objects_section_from_standard_pages():
    objects_section = None
    
    # Search through all page.json files in the standard pages folder
    for root, _, files in os.walk(standard_pages_folder):
        for file in files:
            if file.lower() == 'page.json':
                file_path = os.path.join(root, file)
                with open(file_path, 'r') as f:
                    page_data = json.load(f)
                if 'objects' in page_data:
                    objects_section = page_data['objects']
                    break
        if objects_section is not None:
            break
    
    return objects_section

def update_page_json_files(objects_section):
    if objects_section is None:
        print("No 'objects' section found in standard pages.")
        return
    
    # Update all page.json files in the pbi pages folder
    for root, _, files in os.walk(pbi_pages_folder):
        for file in files:
            if file.lower() == 'page.json':
                file_path = os.path.join(root, file)
                with open(file_path, 'r') as f:
                    page_data = json.load(f)
                
                # Update the 'objects' section
                page_data['objects'] = objects_section
                
                with open(file_path, 'w') as f:
                    json.dump(page_data, f, indent=4)

def find_and_copy_folders():
    global folder_paths
    
    # Search for folders to copy in the standard settings folder
    for folder in folders_to_copy:
        for root, dirs, _ in os.walk(standard_pages_folder):
            if folder in dirs:
                folder_paths[folder] = os.path.join(root, folder)
                break
    
    if len(folder_paths) != len(folders_to_copy):
        print("Some folders not found in standard settings.")
    
    # Copy folders to all visuals folders in the pages folders of pbi_file_in_pbip_format
    for root, dirs, _ in os.walk(pbi_pages_folder):
        for dir in dirs:
            visuals_folder_path = os.path.join(root, dir, 'visuals')
            if os.path.exists(visuals_folder_path):
                for folder_name, folder_path in folder_paths.items():
                    dest_folder_path = os.path.join(visuals_folder_path, folder_name)
                    if not os.path.exists(dest_folder_path):
                        shutil.copytree(folder_path, dest_folder_path, dirs_exist_ok=True)

if __name__ == "__main__":
    copy_registered_resources()
    update_report_json()
    objects_section = get_objects_section_from_standard_pages()
    update_page_json_files(objects_section)
    find_and_copy_folders()
